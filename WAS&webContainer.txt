WAS(Web Application Server)와 web container

웹 어플리케이션 서버는 어플리케이션을 서비스하는 서버이다.

어플리케이션 서버 프레임워크는 어플리케이션 서버를 구축하기 위한 소프트웨어 프레임워크이다.
어플리케이션 서버 프레임워크는 웹 어플리케이션을 생성하기 위한 장치와 그것들을 실행하기위한 환경을 제공한다.

어플리케이션 서버 프레임워크는 종합적인 서비스 레이어 모델을 담고 있다. 이 레이어 모델은 개발자가 플랫폼의
표준 API를 통해 접근할 수 있는 component의 집합을 포함한다. 웹 어플리케이션에 대해서 이 component들은
일반적으로 그것들의 웹서가 구동하는 같은 환경에서 구동하며, 이것들의 주된 역할은 동적인 웹페이지를 구축을 지원하는 것이다.
그러나 많은 was들이 웹페이지를 생성하는 일 말고도 더 많은 일을 한다. 예를 들어 클러스터링 같은 서비스나,
fail-over, 로드 밸런싱 등을 수행하며, 그렇게 하므로써 개발자들이 비즈니스 로직을 구현하는 데 집중하도록 만든다.

자바 어플리케이션 서버의 경우, 서버는 확장된 가상머신의 역할을 한다. 이것들 어플리케이션을 구동하고, DB와의 연결을 투명하게 핸들링하며,
이따금씩 웹 클라이언틀르 다른 클라이언트로 연결하는 일을 하기 위함이다.

유래

어플리케이션 서버라는 명칭은 초기의 클라이언트-서버 시스템을 논의하던 시기에 특정 역할을 하는 서버들을
데이터 서버과 구분하기 위해 사용되었다. 이를테면 sql 서비스 로직을 가지고 있는, 또는 미들웨서 서버들 말이다.

정의

어플리케이션 서버 시스템 소프트웨어는 웹 어플리케이션ㄴ이나 데스크탑 어플리케이션이 구동하는 시스템 소프트웨어이다.
어플리케이션 서버는 웹서버 커넥터, 프로그래밍 랭귀지, 런타임 라이브러리, db 커넥터, 그리고 이러한 components들을
웹 호스트 위에서 deploy, configure, manage, connect하기 위한 관리 코드들로 구성되어 있다.

어플리케이션 서버는 아파치 또는 IIS등의 웹서버의 배후, 그리고 오라클, mysql등의 sql DB에 앞서 구동된다.
웹어플리케이션은 어플리케이셔 서버 위에서 구동한다. 이러한 어플리케이션들은 was가 지원하는 언어로 작성되어 있으며
was가 제공하는 런타임 라이브러리와 components들을 호출한다.

----

web container (= servlet container)

웹 컨테이너는 웹서버의 구성물로서 자카르타 서블릿과 상호작용한다. 이 컨테이너는 서블릿의 라이프사이클을
관리하며, 특정 서블릿에 URL을 매핑하고, URL requester가 올바른 접근권한을 갖게 한다.

웹컨테이너는 서블릿, JSP 파일에 대한 리퀘스트를 관리한다. 이는 서버사이드 코드를 가진 다른 유형의 파일에도
동일하게 적용된다. 웹컨테이너는 servlet의 instance를 생성하고, 서블릿을 로드/언로드하며, 
request/ response object를 생성하고 관리하며, 그 외의 서블릿 관련 업무를 수행한다.

웹컨테이너는 jakarta EE 구조의 web component 규정을 구현한다. 이 구조는 추가적인 웹 컴포넌트에 대한
runtime environment를 구체화 한다. 여기서 말하는 추가적인 웹 컴포넌트는 security, concurrency,
lifecycle mgmt., transaction, deployment과 그 외의 서비스들을 포함한다.

오픈소스 중에서는 톰캣이 대표적이다. 
구체화한다 
