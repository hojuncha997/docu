DAO(Data Access Object)

DAO는 DB나 다른 persistence mechanism에 접근하는 추상적인 인터페이스를 제공하는 객체이다.
어플리케이션의 요청을 persistence layer(영속계층)에 매핑해서, DAO는 DB의 디테일을 노출하지 않고도
특정한 데이터 처리를 제공할 수 있다. 이러한 고립은 단일 책임원칙(Single Responsibility Principle)을
지원한다. 고립은 어플리케이션이 필요로 하는 데이터 접근을 DB와 분리해낸다.

이러한 디자인 패턴이 대부분의 언어, 영속적이어야 하는 소프트웨어, DB 등에 동등하게 적용할 수 있음에도 불구하고
이 DAO는 전통적으로 JAVA EE 어플리케이션과 RDB(JDBC를 통해 접근하는)와 연관이 깊다.

---

DAO의 이점

DAO를 사용함으로써 얻는 주된 이점은 어플리케이션의 중요한 두 부분이 서로 단순하고 엄밀하게 독립된다는 것이다.
그렇게 함으로써 두 부분은 서솔르 알지 못하며, 독자적으로 빈번히 변경될 수 있다. 비즈니스 로직의 변경은 동일한
DAO 인터페이스에 rely on 할 수 있다. 반면에 persistence logic의 변경은 DAO 클라이언트에 영향을 미치지 못한다.
인터페이스가 적합하게 구현된 채로 남아있는 한 말이다.

storage(저장소)의 세세한 부분들은 어플리케이션의 다른 부분들의 알지 못한다. 따라서 persistence mechanism의
변화는 DAO implementation을 수정함으로서 구현될 수 있다. 당연히 다른 부분들은 이러한 수정에 영향을 받지 않는다.

DAO는 어플리케이션과 DB사이의 중간자 역할을 한다. DAO는 오브젝트와 DB 레코드 사이를 오간다.

자바 프로그래밍의 일반적인 맥락에서, DAO는 여러가지 방법으로 구현될 수 있다. 이것은 단순히, 데이터 접근  부분을
어플리케이션 로직과 분리하는 단순한 인터페이스일 수도 있으며, 분리하는 부분이 프레임워크 혹은 제품일 수도 있다.

---

DAO의 단점

DAO의 예상 가능한 단점은 leacky abstraction(불완전한 추상화), 코드 복제, 추상화의 전도 등이 있다.


---

Hypothetical use scenario

회사가 두 고객으로부터 어플리케이션 개발을 수주함. 두 고객의 명세는 거의 동일함.
두 고객 모두 SQL DB를 사용해서 데이터를 관리함. 그런데 한 고객은 특정 회사의 제품을, 다른 고객은 오픈소스 DB를
사용함. 이 상황은 당신이 만들어야 할 어플리케이션의 persistence layer(영속계층)두 가지의 다른 방식으로
구현되어야 한다는 것을 의미함. 더불어 새로운 구현이 필요한 또 다른 고객과 계약함. 

이러한 경우 어떤 종류의 백엔드 DB에도 접근할 수 있도록, DAO 패턴을 사용하여 적당한 규모의
추상화/캡슐화를 할 수 있음.

