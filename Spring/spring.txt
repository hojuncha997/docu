Spring In Action 5th Edition

1.

- 웹애플리케이션 생성, DB사용, 애플리케이션 보안, 마이크로서비스 등에서 개발자의 노력을 덜어주려는 것이
스프링의 목표다

- 스프링 부트는 손쉬운 의존성 관리, 자동-구성, 런타임 시의 애플리케이션 내부 작동 파악을 스프링에서 할 수 있게 한다.

- 스프링 애플리케이션은 스프링 Initializer를 사용해서 초기 설정할 수 있다.
스프링 Initializer는 웹을 기반으로 하며, 대부분의 자바 개발환경을 지원한다.


-스프링은 스프링 애플리케이션 컨텍스트라는 컨테이너를 제공한다. 이것은 애플리케이션 컴포넌트들을 생성하고 관리한다.
애플리케이션 컴포넌트 또는 Bean들은 스프링 애플리케이션 컨텍스트 내부에서 서로 연결되어 완전한 애플리케이션을 만든다.
벽돌, 모르타르, 목재, 못, 배관, 배선이 함께 어우러져 집을 구성하는 것과 비슷하다.

- 빈의 상호 연결은 의존성 주입이라는 패턴을 기반으로 수행된다. 즉, 애플리케이션 컴포넌트에서 의존(사용)하는
다른 빈의 생성과 관리를 자체적으로 하는 대신, 별도의 개체(컨테이너=스프링 어플리케이션 컨텍스트)가 해주며,
이 개체에서는 모든 컴포넌트를 생성, 관리하고 해당 컴포넌트를 필요로 하는 빈에 주입(연결)한다.
일반적으로 이것은 생성자 인자 또는 속성의 접근자 메서드를 통해 처리된다.

- 빈Bean 이라고 하는 컴포넌트는 스프링 애플리케이션 컨텍스트에서 자바나 XML로 선언할 수 있으며,
컴포넌트 탐색으로 찾거나 스프링 부트-자동구성에서 자동으로 구성할 수도 있다.

- 지금까지의 스프링 버전에서는 컴포넌트 및 다른 컴포넌트와의 관계를 나타내는 하나 이상의 XML 파일을 사용해서
빈을 상호 연결하도록 스프링 애플리케이션 컨텍스트에 알려주었다. 

<bean id="inventoryService"
	class="com.example.InventoryService" />
	
<bean id="productService"
	class="com.example.ProductService" />
 <constructor-arg ref="inventoryService" />
 </bean>
 
 그러나 최신 버전의 스프링에서는 자바 기반의 구성configuration이 더 많이 사용된다.
 
 @Configuration
 public class ServiceConfiguration {
 	@Bean
 	public InventoryService inventoryService() {
 		return new InventoryService();
 	}
 
 	@Bean
 	public ProductService productService() {
 		return new ProductService(inventoryService());
 	}
 
 }

여기서 @Configuration 애노테이션은 이것이 각 빈을 스프링 애플리케이션 컨텍스트에 제공하는
구성 클래스라는 것을 스프링에게 알려준다 구성클래스의 메소드에는 @Bean 애노테이션이 지정되어 있으며,
이것은 각 메서드에서 반환되는 객체가 애플리케이션 컨텍스트의 빈으로 추가되어야 한다는 것을 나타낸다.

XML 기반 구성에 비해 자바 기반 구성은 더 강화된 타입 안전과 향상된 리팩토링 기능을 포함해서
몇 가지 장점을 제공한다. 그러나 스프링은 자동으로 컴포넌트들을 구성할 수 있는 자동-구성 기능이 있어서
별도의 XML 구성이나 자바 구성이 없어도 된다. 따라서 자동구성을 할 수 없을 경우에만 필요하다.

* 애노테이션
애노테이션은 클래스, 인터페이스, 함수, 매개변수, 속성, 생성자에 어떤 의미를 추가할 수 있는 기능이며,
자바 컴파일러가 컴파일 시에 처리한다. 즉, 소스 코드에 추가된 애노테이션 자체는 바이트 코드로
생성되지 않고 주석으로 처리되지만 , 그것이 갖는 의미대로 컴파일러가 작업을 수행해 준다.
애노테이션은 @로 시작하는 이름을 갖는다.

최근에는 스프링 부트가 소개되면서 자동구성 기능이 더욱 향상되었다. 스프링 부트는 생산성 향상을 제공하는
스프링 프레임워크의 확장이며, 향상된 자동구성(auto-configuration) 기능에 의해 환경변수인 classpath를
기준으로 어떤 컴포넌트가 구성되고 연결되어야 하는지 알 수 있다.

스프링 부트의 자동구성은 애플리케이션을 빌드하는 데 필요한 별도의 구성 코드(xml이나 자바 등)를 현격히
줄여준다.


2.

- 스프링은 스프링 MVC라는 강력한 웹 프레임워크를 제공하는데, 
스프링 MVC는 스프링 애플리케이션의 웹 프론트앤드 개발에 사용한다.

- 스프링 MVC는 애노테이션을 기반으로 하며, @RequestMapping, @GetMapping, @PostMapping과 같은 애노테이션을
사용해서 요청처리 메서드를 선언할 수 있다.

- 대부분의 요청 처리 메ㅐ서드들은 마지막에 Thymeleaf 탬플릿과 같은 논리 뷰 이름을 반환한다.
모델 데이터와 함께 해당 요청을 전달하기 위해서다.

- 스프링 MVC는 자바 빈 유효성 검사 API(Application Programming Interface)와
Hibernate Validator 등의 유효성 검사 API 구현 컴포넌트를 통해 유효성 검사를 지원한다.

- 모델 데이터가 없거나 처리할 필요가 없는 HTTP GET 요청을 처리할 때는 뷰 컨트롤러를 사용할 수 있다.

- Thymeleaf에 추가하여 스프링은 다양한 뷰 탬플릿(FreeMarker, Groovy Templates, Mustache)
